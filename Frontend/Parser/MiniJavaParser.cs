// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2008
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.5.190
// Machine:  UZAIR-PC
// DateTime: 12/12/2009 12:38:10 PM
// UserName: Uzair
// Input file <MiniJavaParser.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using MiniJava;
using MiniJava.AST;

public enum Tokens {
    error=1,EOF=2,Null=3,Identifier=4,IntKeyword=5,BooleanKeyword=6,
    IfKeyword=7,ElseKeyword=8,WhileKeyword=9,SystemOutPrintLnKeyword=10,TrueKeyword=11,ThisKeyword=12,
    NewKeyword=13,ClassKeyword=14,PublicKeyword=15,StaticKeyword=16,VoidKeyword=17,MainKeyword=18,
    StringKeyword=19,ExtendsKeyword=20,ReturnKeyword=21,LengthKeyword=22,FalseKeyword=23,RoundBracketOpen=24,
    RoundBracketClose=25,CurlyBracketOpen=26,CurlyBracketClose=27,SemiColon=28,IntegerConstant=29,SquareBracketClose=30,
    EqualsOperator=31,Comma=32,AndAndOperator=33,LessThanOperator=34,AddOperator=35,SubtractOperator=36,
    MultiplyOperator=37,DivideOperator=38,NotOperator=39,Dot=40,SquareBracketOpen=41};

// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<BaseASTNode,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class Parser: ShiftReduceParser<BaseASTNode, LexLocation>
{
    int[] regs = new int[26];
	public bool ErrorFlag;
	public static int LineNumber = 1;
	public ProgramAnalysis Analysis;
#pragma warning disable 649
    private Dictionary<int, string> aliasses;
#pragma warning restore 649

  protected override void Initialize()
  {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);

    this.InitStateTable(153);
    AddState(0,new State(new int[]{14,136},new int[]{-1,1,-3,3}));
    AddState(1,new State(new int[]{2,2}));
    AddState(2,new State(-1));
    AddState(3,new State(-5,new int[]{-4,4}));
    AddState(4,new State(new int[]{14,6,2,-2},new int[]{-6,5}));
    AddState(5,new State(-4));
    AddState(6,new State(new int[]{4,7}));
    AddState(7,new State(new int[]{20,134,26,-8},new int[]{-7,8}));
    AddState(8,new State(new int[]{26,9}));
    AddState(9,new State(-13,new int[]{-8,10}));
    AddState(10,new State(new int[]{5,123,6,126,4,133,27,-10,15,-10},new int[]{-9,11,-14,24,-11,120}));
    AddState(11,new State(new int[]{27,12,15,14},new int[]{-10,13}));
    AddState(12,new State(-6));
    AddState(13,new State(-9));
    AddState(14,new State(new int[]{5,123,6,126,4,133},new int[]{-11,15}));
    AddState(15,new State(new int[]{4,16}));
    AddState(16,new State(new int[]{24,17}));
    AddState(17,new State(new int[]{5,123,6,126,4,133,25,-18},new int[]{-12,18,-11,127}));
    AddState(18,new State(new int[]{25,19}));
    AddState(19,new State(new int[]{26,20}));
    AddState(20,new State(-13,new int[]{-8,21}));
    AddState(21,new State(new int[]{26,27,7,31,9,38,10,43,4,119,1,113,21,116,5,123,6,126},new int[]{-13,22,-14,24,-5,25,-11,120}));
    AddState(22,new State(new int[]{27,23}));
    AddState(23,new State(-11));
    AddState(24,new State(-12));
    AddState(25,new State(new int[]{26,27,7,31,9,38,10,43,4,98,1,113,21,116},new int[]{-13,26,-5,25}));
    AddState(26,new State(-15));
    AddState(27,new State(-35,new int[]{-17,28}));
    AddState(28,new State(new int[]{27,29,26,27,7,31,9,38,10,43,4,98,1,113},new int[]{-5,30}));
    AddState(29,new State(-25));
    AddState(30,new State(-34));
    AddState(31,new State(new int[]{24,32}));
    AddState(32,new State(new int[]{24,71,39,74,13,76,12,81,4,82,29,83,11,84,23,85,1,86},new int[]{-15,33}));
    AddState(33,new State(new int[]{25,34,33,48,34,50,35,52,36,54,37,56,41,58,40,61}));
    AddState(34,new State(new int[]{26,27,7,31,9,38,10,43,4,98,1,113},new int[]{-5,35}));
    AddState(35,new State(new int[]{8,36}));
    AddState(36,new State(new int[]{26,27,7,31,9,38,10,43,4,98,1,113},new int[]{-5,37}));
    AddState(37,new State(-26));
    AddState(38,new State(new int[]{24,39}));
    AddState(39,new State(new int[]{24,71,39,74,13,76,12,81,4,82,29,83,11,84,23,85,1,86},new int[]{-15,40}));
    AddState(40,new State(new int[]{25,41,33,48,34,50,35,52,36,54,37,56,41,58,40,61}));
    AddState(41,new State(new int[]{26,27,7,31,9,38,10,43,4,98,1,113},new int[]{-5,42}));
    AddState(42,new State(-27));
    AddState(43,new State(new int[]{24,44}));
    AddState(44,new State(new int[]{24,71,39,74,13,76,12,81,4,82,29,83,11,84,23,85,1,86},new int[]{-15,45}));
    AddState(45,new State(new int[]{25,46,33,48,34,50,35,52,36,54,37,56,41,58,40,61}));
    AddState(46,new State(new int[]{28,47}));
    AddState(47,new State(-28));
    AddState(48,new State(new int[]{24,71,39,74,13,76,12,81,4,82,29,83,11,84,23,85,1,86},new int[]{-15,49}));
    AddState(49,new State(new int[]{33,-40,34,50,35,52,36,54,37,56,41,58,40,61,25,-40,30,-40,32,-40,28,-40}));
    AddState(50,new State(new int[]{24,71,39,74,13,76,12,81,4,82,29,83,11,84,23,85,1,86},new int[]{-15,51}));
    AddState(51,new State(new int[]{33,-41,34,-41,35,52,36,54,37,56,41,58,40,61,25,-41,30,-41,32,-41,28,-41}));
    AddState(52,new State(new int[]{24,71,39,74,13,76,12,81,4,82,29,83,11,84,23,85,1,86},new int[]{-15,53}));
    AddState(53,new State(new int[]{33,-42,34,-42,35,-42,36,-42,37,56,41,58,40,61,25,-42,30,-42,32,-42,28,-42}));
    AddState(54,new State(new int[]{24,71,39,74,13,76,12,81,4,82,29,83,11,84,23,85,1,86},new int[]{-15,55}));
    AddState(55,new State(new int[]{33,-43,34,-43,35,-43,36,-43,37,56,41,58,40,61,25,-43,30,-43,32,-43,28,-43}));
    AddState(56,new State(new int[]{24,71,39,74,13,76,12,81,4,82,29,83,11,84,23,85,1,86},new int[]{-15,57}));
    AddState(57,new State(new int[]{33,-44,34,-44,35,-44,36,-44,37,-44,41,58,40,61,25,-44,30,-44,32,-44,28,-44}));
    AddState(58,new State(new int[]{24,71,39,74,13,76,12,81,4,82,29,83,11,84,23,85,1,86},new int[]{-15,59}));
    AddState(59,new State(new int[]{30,60,33,48,34,50,35,52,36,54,37,56,41,58,40,61}));
    AddState(60,new State(-45));
    AddState(61,new State(new int[]{22,62,4,63}));
    AddState(62,new State(-46));
    AddState(63,new State(new int[]{24,64,25,-47,33,-47,34,-47,35,-47,36,-47,37,-47,41,-47,40,-47,30,-47,32,-47,28,-47}));
    AddState(64,new State(new int[]{24,71,39,74,13,76,12,81,4,82,29,83,11,84,23,85,1,86,25,-63},new int[]{-18,65,-15,67}));
    AddState(65,new State(new int[]{25,66}));
    AddState(66,new State(-48));
    AddState(67,new State(new int[]{33,48,34,50,35,52,36,54,37,56,41,58,40,61,32,-65,25,-65},new int[]{-19,68}));
    AddState(68,new State(new int[]{32,69,25,-62}));
    AddState(69,new State(new int[]{24,71,39,74,13,76,12,81,4,82,29,83,11,84,23,85,1,86},new int[]{-15,70}));
    AddState(70,new State(new int[]{33,48,34,50,35,52,36,54,37,56,41,58,40,61,32,-64,25,-64}));
    AddState(71,new State(new int[]{24,71,39,74,13,76,12,81,4,82,29,83,11,84,23,85,1,86},new int[]{-15,72}));
    AddState(72,new State(new int[]{25,73,33,48,34,50,35,52,36,54,37,56,41,58,40,61}));
    AddState(73,new State(-36));
    AddState(74,new State(new int[]{24,71,39,74,13,76,12,81,4,82,29,83,11,84,23,85,1,86},new int[]{-15,75}));
    AddState(75,new State(new int[]{33,-37,34,-37,35,-37,36,-37,37,-37,41,58,40,61,25,-37,30,-37,32,-37,28,-37}));
    AddState(76,new State(new int[]{5,77,4,95}));
    AddState(77,new State(new int[]{41,78}));
    AddState(78,new State(new int[]{24,71,39,74,13,76,12,81,4,82,29,83,11,84,23,85,1,86},new int[]{-15,79}));
    AddState(79,new State(new int[]{30,80,33,48,34,50,35,52,36,54,37,56,41,58,40,61}));
    AddState(80,new State(-38));
    AddState(81,new State(-49));
    AddState(82,new State(-50));
    AddState(83,new State(-51));
    AddState(84,new State(-52));
    AddState(85,new State(-53));
    AddState(86,new State(new int[]{29,87,11,88,23,89,4,90,12,91,30,92,25,93,22,94}));
    AddState(87,new State(-54));
    AddState(88,new State(-55));
    AddState(89,new State(-56));
    AddState(90,new State(-57));
    AddState(91,new State(-58));
    AddState(92,new State(-59));
    AddState(93,new State(-60));
    AddState(94,new State(-61));
    AddState(95,new State(new int[]{24,96}));
    AddState(96,new State(new int[]{25,97}));
    AddState(97,new State(-39));
    AddState(98,new State(new int[]{31,99,40,102,41,107}));
    AddState(99,new State(new int[]{24,71,39,74,13,76,12,81,4,82,29,83,11,84,23,85,1,86},new int[]{-15,100}));
    AddState(100,new State(new int[]{28,101,33,48,34,50,35,52,36,54,37,56,41,58,40,61}));
    AddState(101,new State(-29));
    AddState(102,new State(new int[]{4,103}));
    AddState(103,new State(new int[]{31,104}));
    AddState(104,new State(new int[]{24,71,39,74,13,76,12,81,4,82,29,83,11,84,23,85,1,86},new int[]{-15,105}));
    AddState(105,new State(new int[]{28,106,33,48,34,50,35,52,36,54,37,56,41,58,40,61}));
    AddState(106,new State(-30));
    AddState(107,new State(new int[]{24,71,39,74,13,76,12,81,4,82,29,83,11,84,23,85,1,86},new int[]{-15,108}));
    AddState(108,new State(new int[]{30,109,33,48,34,50,35,52,36,54,37,56,41,58,40,61}));
    AddState(109,new State(new int[]{31,110}));
    AddState(110,new State(new int[]{24,71,39,74,13,76,12,81,4,82,29,83,11,84,23,85,1,86},new int[]{-15,111}));
    AddState(111,new State(new int[]{28,112,33,48,34,50,35,52,36,54,37,56,41,58,40,61}));
    AddState(112,new State(-31));
    AddState(113,new State(new int[]{28,114,27,115}));
    AddState(114,new State(-32));
    AddState(115,new State(-33));
    AddState(116,new State(new int[]{24,71,39,74,13,76,12,81,4,82,29,83,11,84,23,85,1,86},new int[]{-15,117}));
    AddState(117,new State(new int[]{28,118,33,48,34,50,35,52,36,54,37,56,41,58,40,61}));
    AddState(118,new State(-16));
    AddState(119,new State(new int[]{31,99,40,102,41,107,4,-24}));
    AddState(120,new State(new int[]{4,121}));
    AddState(121,new State(new int[]{28,122}));
    AddState(122,new State(-14));
    AddState(123,new State(new int[]{41,124,4,-22}));
    AddState(124,new State(new int[]{30,125}));
    AddState(125,new State(-21));
    AddState(126,new State(-23));
    AddState(127,new State(new int[]{4,128}));
    AddState(128,new State(-20,new int[]{-16,129}));
    AddState(129,new State(new int[]{32,130,25,-17}));
    AddState(130,new State(new int[]{5,123,6,126,4,133},new int[]{-11,131}));
    AddState(131,new State(new int[]{4,132}));
    AddState(132,new State(-19));
    AddState(133,new State(-24));
    AddState(134,new State(new int[]{4,135}));
    AddState(135,new State(-7));
    AddState(136,new State(new int[]{4,137}));
    AddState(137,new State(new int[]{26,138}));
    AddState(138,new State(new int[]{15,139}));
    AddState(139,new State(new int[]{16,140}));
    AddState(140,new State(new int[]{17,141}));
    AddState(141,new State(new int[]{18,142}));
    AddState(142,new State(new int[]{24,143}));
    AddState(143,new State(new int[]{19,144}));
    AddState(144,new State(new int[]{41,145}));
    AddState(145,new State(new int[]{30,146}));
    AddState(146,new State(new int[]{4,147}));
    AddState(147,new State(new int[]{25,148}));
    AddState(148,new State(new int[]{26,149}));
    AddState(149,new State(new int[]{26,27,7,31,9,38,10,43,4,98,1,113},new int[]{-5,150}));
    AddState(150,new State(new int[]{27,151}));
    AddState(151,new State(new int[]{27,152}));
    AddState(152,new State(-3));

    Rule[] rules=new Rule[66];
    rules[1]=new Rule(-2, new int[]{-1,2});
    rules[2]=new Rule(-1, new int[]{-3,-4});
    rules[3]=new Rule(-3, new int[]{14,4,26,15,16,17,18,24,19,41,30,4,25,26,-5,27,27});
    rules[4]=new Rule(-4, new int[]{-4,-6});
    rules[5]=new Rule(-4, new int[]{});
    rules[6]=new Rule(-6, new int[]{14,4,-7,26,-8,-9,27});
    rules[7]=new Rule(-7, new int[]{20,4});
    rules[8]=new Rule(-7, new int[]{});
    rules[9]=new Rule(-9, new int[]{-9,-10});
    rules[10]=new Rule(-9, new int[]{});
    rules[11]=new Rule(-10, new int[]{15,-11,4,24,-12,25,26,-8,-13,27});
    rules[12]=new Rule(-8, new int[]{-8,-14});
    rules[13]=new Rule(-8, new int[]{});
    rules[14]=new Rule(-14, new int[]{-11,4,28});
    rules[15]=new Rule(-13, new int[]{-5,-13});
    rules[16]=new Rule(-13, new int[]{21,-15,28});
    rules[17]=new Rule(-12, new int[]{-11,4,-16});
    rules[18]=new Rule(-12, new int[]{});
    rules[19]=new Rule(-16, new int[]{-16,32,-11,4});
    rules[20]=new Rule(-16, new int[]{});
    rules[21]=new Rule(-11, new int[]{5,41,30});
    rules[22]=new Rule(-11, new int[]{5});
    rules[23]=new Rule(-11, new int[]{6});
    rules[24]=new Rule(-11, new int[]{4});
    rules[25]=new Rule(-5, new int[]{26,-17,27});
    rules[26]=new Rule(-5, new int[]{7,24,-15,25,-5,8,-5});
    rules[27]=new Rule(-5, new int[]{9,24,-15,25,-5});
    rules[28]=new Rule(-5, new int[]{10,24,-15,25,28});
    rules[29]=new Rule(-5, new int[]{4,31,-15,28});
    rules[30]=new Rule(-5, new int[]{4,40,4,31,-15,28});
    rules[31]=new Rule(-5, new int[]{4,41,-15,30,31,-15,28});
    rules[32]=new Rule(-5, new int[]{1,28});
    rules[33]=new Rule(-5, new int[]{1,27});
    rules[34]=new Rule(-17, new int[]{-17,-5});
    rules[35]=new Rule(-17, new int[]{});
    rules[36]=new Rule(-15, new int[]{24,-15,25});
    rules[37]=new Rule(-15, new int[]{39,-15});
    rules[38]=new Rule(-15, new int[]{13,5,41,-15,30});
    rules[39]=new Rule(-15, new int[]{13,4,24,25});
    rules[40]=new Rule(-15, new int[]{-15,33,-15});
    rules[41]=new Rule(-15, new int[]{-15,34,-15});
    rules[42]=new Rule(-15, new int[]{-15,35,-15});
    rules[43]=new Rule(-15, new int[]{-15,36,-15});
    rules[44]=new Rule(-15, new int[]{-15,37,-15});
    rules[45]=new Rule(-15, new int[]{-15,41,-15,30});
    rules[46]=new Rule(-15, new int[]{-15,40,22});
    rules[47]=new Rule(-15, new int[]{-15,40,4});
    rules[48]=new Rule(-15, new int[]{-15,40,4,24,-18,25});
    rules[49]=new Rule(-15, new int[]{12});
    rules[50]=new Rule(-15, new int[]{4});
    rules[51]=new Rule(-15, new int[]{29});
    rules[52]=new Rule(-15, new int[]{11});
    rules[53]=new Rule(-15, new int[]{23});
    rules[54]=new Rule(-15, new int[]{1,29});
    rules[55]=new Rule(-15, new int[]{1,11});
    rules[56]=new Rule(-15, new int[]{1,23});
    rules[57]=new Rule(-15, new int[]{1,4});
    rules[58]=new Rule(-15, new int[]{1,12});
    rules[59]=new Rule(-15, new int[]{1,30});
    rules[60]=new Rule(-15, new int[]{1,25});
    rules[61]=new Rule(-15, new int[]{1,22});
    rules[62]=new Rule(-18, new int[]{-15,-19});
    rules[63]=new Rule(-18, new int[]{});
    rules[64]=new Rule(-19, new int[]{-19,32,-15});
    rules[65]=new Rule(-19, new int[]{});
    this.InitRules(rules);

    this.InitNonTerminals(new string[] {"", "Program", "$accept", "MainClassDecl", 
      "ClassDeclList_Opt", "Statement", "ClassDecl", "Extends_Opt", "VariableDeclList_Opt", 
      "MethodDeclList_Opt", "MethodDecl", "Type", "ParamDeclList_Opt", "StatementListEndingInReturn", 
      "VariableDecl", "Expr", "ParamDeclListRest_Opt", "StatementList_Opt", "ExprList_Opt", 
      "ExprListRest_Opt", });
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // Program -> MainClassDecl, ClassDeclList_Opt
{ CurrentSemanticValue = new ProgramNode((MainClassDeclNode)ValueStack[ValueStack.Depth-2],(ClassDeclListNode)ValueStack[ValueStack.Depth-1], LineNumber); Analysis.AST = (ProgramNode)CurrentSemanticValue; }
        break;
      case 3: // MainClassDecl -> ClassKeyword, Identifier, CurlyBracketOpen, PublicKeyword, 
              //                  StaticKeyword, VoidKeyword, MainKeyword, RoundBracketOpen, 
              //                  StringKeyword, SquareBracketOpen, SquareBracketClose, 
              //                  Identifier, RoundBracketClose, CurlyBracketOpen, Statement, 
              //                  CurlyBracketClose, CurlyBracketClose
{ CurrentSemanticValue = new MainClassDeclNode((IdentifierNode)ValueStack[ValueStack.Depth-16],(IdentifierNode)ValueStack[ValueStack.Depth-6],(StatementNode)ValueStack[ValueStack.Depth-3],LineNumber); }
        break;
      case 4: // ClassDeclList_Opt -> ClassDeclList_Opt, ClassDecl
{  ((ClassDeclListNode)ValueStack[ValueStack.Depth-2]).AddClassDecl((ClassDeclNode)ValueStack[ValueStack.Depth-1]); CurrentSemanticValue=ValueStack[ValueStack.Depth-2]; }
        break;
      case 5: // ClassDeclList_Opt -> /* empty */
{ CurrentSemanticValue = new ClassDeclListNode(LineNumber); }
        break;
      case 6: // ClassDecl -> ClassKeyword, Identifier, Extends_Opt, CurlyBracketOpen, 
              //              VariableDeclList_Opt, MethodDeclList_Opt, CurlyBracketClose
{ CurrentSemanticValue = new ClassDeclNode((IdentifierNode)ValueStack[ValueStack.Depth-6],(ExtendsNode)ValueStack[ValueStack.Depth-5],(VariableDeclListNode)ValueStack[ValueStack.Depth-3],(MethodDeclListNode)ValueStack[ValueStack.Depth-2],LineNumber); }
        break;
      case 7: // Extends_Opt -> ExtendsKeyword, Identifier
{ CurrentSemanticValue = new ExtendsNode((IdentifierNode)ValueStack[ValueStack.Depth-1],LineNumber); }
        break;
      case 9: // MethodDeclList_Opt -> MethodDeclList_Opt, MethodDecl
{  ((MethodDeclListNode)ValueStack[ValueStack.Depth-2]).AddMethodDecl((MethodDeclNode)ValueStack[ValueStack.Depth-1]); CurrentSemanticValue=ValueStack[ValueStack.Depth-2]; }
        break;
      case 10: // MethodDeclList_Opt -> /* empty */
{ CurrentSemanticValue = new MethodDeclListNode(LineNumber); }
        break;
      case 11: // MethodDecl -> PublicKeyword, Type, Identifier, RoundBracketOpen, 
               //               ParamDeclList_Opt, RoundBracketClose, CurlyBracketOpen, 
               //               VariableDeclList_Opt, StatementListEndingInReturn, 
               //               CurlyBracketClose
{ ((StatementListNode)ValueStack[ValueStack.Depth-2]).statementList.Reverse(); CurrentSemanticValue = new MethodDeclNode((TypeNode)ValueStack[ValueStack.Depth-9],(IdentifierNode)ValueStack[ValueStack.Depth-8],(ParamDeclListNode)ValueStack[ValueStack.Depth-6],(VariableDeclListNode)ValueStack[ValueStack.Depth-3],(StatementListNode)ValueStack[ValueStack.Depth-2],LineNumber); }
        break;
      case 12: // VariableDeclList_Opt -> VariableDeclList_Opt, VariableDecl
{  ((VariableDeclListNode)ValueStack[ValueStack.Depth-2]).AddVariableDecl((VariableDeclNode)ValueStack[ValueStack.Depth-1]); CurrentSemanticValue=ValueStack[ValueStack.Depth-2]; }
        break;
      case 13: // VariableDeclList_Opt -> /* empty */
{ CurrentSemanticValue = new VariableDeclListNode(LineNumber); }
        break;
      case 14: // VariableDecl -> Type, Identifier, SemiColon
{ CurrentSemanticValue = new VariableDeclNode((TypeNode)ValueStack[ValueStack.Depth-3],(IdentifierNode)ValueStack[ValueStack.Depth-2],LineNumber); }
        break;
      case 15: // StatementListEndingInReturn -> Statement, StatementListEndingInReturn
{ ((StatementListNode)ValueStack[ValueStack.Depth-1]).AddStatement((StatementNode)ValueStack[ValueStack.Depth-2]); CurrentSemanticValue=ValueStack[ValueStack.Depth-1]; }
        break;
      case 16: // StatementListEndingInReturn -> ReturnKeyword, Expr, SemiColon
{ CurrentSemanticValue = new StatementListNode(LineNumber); ((StatementListNode)CurrentSemanticValue).AddStatement(new ReturnStatementNode((ExpressionNode)ValueStack[ValueStack.Depth-2],LineNumber)); }
        break;
      case 17: // ParamDeclList_Opt -> Type, Identifier, ParamDeclListRest_Opt
{ ((ParamDeclListNode)ValueStack[ValueStack.Depth-1]).paramDeclList.Reverse(); ((ParamDeclListNode)ValueStack[ValueStack.Depth-1]).AddParamDecl(new ParamDeclNode((TypeNode)ValueStack[ValueStack.Depth-3],(IdentifierNode)ValueStack[ValueStack.Depth-2],LineNumber)); ((ParamDeclListNode)ValueStack[ValueStack.Depth-1]).paramDeclList.Reverse(); CurrentSemanticValue=ValueStack[ValueStack.Depth-1]; }
        break;
      case 19: // ParamDeclListRest_Opt -> ParamDeclListRest_Opt, Comma, Type, Identifier
{  ((ParamDeclListNode)ValueStack[ValueStack.Depth-4]).AddParamDecl(new ParamDeclNode((TypeNode)ValueStack[ValueStack.Depth-2],(IdentifierNode)ValueStack[ValueStack.Depth-1],LineNumber)); CurrentSemanticValue=ValueStack[ValueStack.Depth-4]; }
        break;
      case 20: // ParamDeclListRest_Opt -> /* empty */
{ CurrentSemanticValue = new ParamDeclListNode(LineNumber); }
        break;
      case 21: // Type -> IntKeyword, SquareBracketOpen, SquareBracketClose
{ CurrentSemanticValue = new IntegerArrayTypeNode(LineNumber); }
        break;
      case 22: // Type -> IntKeyword
{ CurrentSemanticValue = new IntegerTypeNode(LineNumber); }
        break;
      case 23: // Type -> BooleanKeyword
{ CurrentSemanticValue = new BooleanTypeNode(LineNumber); }
        break;
      case 24: // Type -> Identifier
{ CurrentSemanticValue = new IdentifierTypeNode(((IdentifierNode)ValueStack[ValueStack.Depth-1]).name,LineNumber); }
        break;
      case 25: // Statement -> CurlyBracketOpen, StatementList_Opt, CurlyBracketClose
{ CurrentSemanticValue = new StatementBlockNode((StatementListNode)ValueStack[ValueStack.Depth-2],LineNumber); }
        break;
      case 26: // Statement -> IfKeyword, RoundBracketOpen, Expr, RoundBracketClose, Statement, 
               //              ElseKeyword, Statement
{ CurrentSemanticValue = new IfStatementNode((ExpressionNode)ValueStack[ValueStack.Depth-5],(StatementNode)ValueStack[ValueStack.Depth-3],(StatementNode)ValueStack[ValueStack.Depth-1],LineNumber); }
        break;
      case 27: // Statement -> WhileKeyword, RoundBracketOpen, Expr, RoundBracketClose, Statement
{ CurrentSemanticValue = new WhileStatementNode((ExpressionNode)ValueStack[ValueStack.Depth-3],(StatementNode)ValueStack[ValueStack.Depth-1],LineNumber); }
        break;
      case 28: // Statement -> SystemOutPrintLnKeyword, RoundBracketOpen, Expr, RoundBracketClose, 
               //              SemiColon
{ CurrentSemanticValue = new SystemOutPrintLnStatementNode((ExpressionNode)ValueStack[ValueStack.Depth-3],LineNumber); }
        break;
      case 29: // Statement -> Identifier, EqualsOperator, Expr, SemiColon
{ CurrentSemanticValue = new AssignmentStatementNode((IdentifierNode)ValueStack[ValueStack.Depth-4],(ExpressionNode)ValueStack[ValueStack.Depth-2],LineNumber); }
        break;
      case 30: // Statement -> Identifier, Dot, Identifier, EqualsOperator, Expr, SemiColon
{ CurrentSemanticValue = new FieldAssignmentStatementNode((IdentifierNode)ValueStack[ValueStack.Depth-6],(IdentifierNode)ValueStack[ValueStack.Depth-4],(ExpressionNode)ValueStack[ValueStack.Depth-2],LineNumber); }
        break;
      case 31: // Statement -> Identifier, SquareBracketOpen, Expr, SquareBracketClose, 
               //              EqualsOperator, Expr, SemiColon
{ CurrentSemanticValue = new ArrayAssignmentStatementNode((IdentifierNode)ValueStack[ValueStack.Depth-7],(ExpressionNode)ValueStack[ValueStack.Depth-5],(ExpressionNode)ValueStack[ValueStack.Depth-2],LineNumber); }
        break;
      case 32: // Statement -> error, SemiColon
{ CurrentSemanticValue = new StatementBlockNode(new StatementListNode(LineNumber),LineNumber); yyclearin(); Analysis.LogSyntaxError("Syntax error", LineNumber);}
        break;
      case 33: // Statement -> error, CurlyBracketClose
{ CurrentSemanticValue = new StatementBlockNode(new StatementListNode(LineNumber),LineNumber); yyclearin(); Analysis.LogSyntaxError("Syntax error", LineNumber);}
        break;
      case 34: // StatementList_Opt -> StatementList_Opt, Statement
{  ((StatementListNode)ValueStack[ValueStack.Depth-2]).AddStatement((StatementNode)ValueStack[ValueStack.Depth-1]); CurrentSemanticValue=ValueStack[ValueStack.Depth-2]; }
        break;
      case 35: // StatementList_Opt -> /* empty */
{ CurrentSemanticValue = new StatementListNode(LineNumber); }
        break;
      case 36: // Expr -> RoundBracketOpen, Expr, RoundBracketClose
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 37: // Expr -> NotOperator, Expr
{ CurrentSemanticValue = new NotExpressionNode((ExpressionNode)ValueStack[ValueStack.Depth-1],LineNumber); }
        break;
      case 38: // Expr -> NewKeyword, IntKeyword, SquareBracketOpen, Expr, SquareBracketClose
{ CurrentSemanticValue = new NewIntegerArrayExpressionNode((ExpressionNode)ValueStack[ValueStack.Depth-2],LineNumber); }
        break;
      case 39: // Expr -> NewKeyword, Identifier, RoundBracketOpen, RoundBracketClose
{ CurrentSemanticValue = new NewObjectExpressionNode((IdentifierNode)ValueStack[ValueStack.Depth-3],LineNumber); }
        break;
      case 40: // Expr -> Expr, AndAndOperator, Expr
{ CurrentSemanticValue = new AndExpressionNode((ExpressionNode)ValueStack[ValueStack.Depth-3],(ExpressionNode)ValueStack[ValueStack.Depth-1],LineNumber); }
        break;
      case 41: // Expr -> Expr, LessThanOperator, Expr
{ CurrentSemanticValue = new LessThanExpressionNode((ExpressionNode)ValueStack[ValueStack.Depth-3],(ExpressionNode)ValueStack[ValueStack.Depth-1],LineNumber); }
        break;
      case 42: // Expr -> Expr, AddOperator, Expr
{ CurrentSemanticValue = new AddExpressionNode((ExpressionNode)ValueStack[ValueStack.Depth-3],(ExpressionNode)ValueStack[ValueStack.Depth-1],LineNumber); }
        break;
      case 43: // Expr -> Expr, SubtractOperator, Expr
{ CurrentSemanticValue = new SubtractExpressionNode((ExpressionNode)ValueStack[ValueStack.Depth-3],(ExpressionNode)ValueStack[ValueStack.Depth-1],LineNumber); }
        break;
      case 44: // Expr -> Expr, MultiplyOperator, Expr
{ CurrentSemanticValue = new MultiplyExpressionNode((ExpressionNode)ValueStack[ValueStack.Depth-3],(ExpressionNode)ValueStack[ValueStack.Depth-1],LineNumber); }
        break;
      case 45: // Expr -> Expr, SquareBracketOpen, Expr, SquareBracketClose
{ CurrentSemanticValue = new ArrayLookupExpressionNode((ExpressionNode)ValueStack[ValueStack.Depth-4],(ExpressionNode)ValueStack[ValueStack.Depth-2],LineNumber); }
        break;
      case 46: // Expr -> Expr, Dot, LengthKeyword
{ CurrentSemanticValue = new LengthExpressionNode((ExpressionNode)ValueStack[ValueStack.Depth-3],LineNumber); }
        break;
      case 47: // Expr -> Expr, Dot, Identifier
{ CurrentSemanticValue = new FieldAccessExpressionNode((ExpressionNode)ValueStack[ValueStack.Depth-3],(IdentifierNode)ValueStack[ValueStack.Depth-1],LineNumber); }
        break;
      case 48: // Expr -> Expr, Dot, Identifier, RoundBracketOpen, ExprList_Opt, 
               //         RoundBracketClose
{ CurrentSemanticValue = new MethodCallExpressionNode((ExpressionNode)ValueStack[ValueStack.Depth-6],(IdentifierNode)ValueStack[ValueStack.Depth-4],(ExpressionListNode)ValueStack[ValueStack.Depth-2],LineNumber); }
        break;
      case 49: // Expr -> ThisKeyword
{ CurrentSemanticValue = new ThisExpressionNode(LineNumber); }
        break;
      case 50: // Expr -> Identifier
{ CurrentSemanticValue = new IdentifierExpressionNode((IdentifierNode)ValueStack[ValueStack.Depth-1],LineNumber); }
        break;
      case 51: // Expr -> IntegerConstant
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 52: // Expr -> TrueKeyword
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 53: // Expr -> FalseKeyword
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 54: // Expr -> error, IntegerConstant
{  CurrentSemanticValue = new InvalidExpressionNode(LineNumber); yyclearin(); Analysis.LogSyntaxError("Syntax error", LineNumber); }
        break;
      case 55: // Expr -> error, TrueKeyword
{  CurrentSemanticValue = new InvalidExpressionNode(LineNumber); yyclearin(); Analysis.LogSyntaxError("Syntax error", LineNumber); }
        break;
      case 56: // Expr -> error, FalseKeyword
{  CurrentSemanticValue = new InvalidExpressionNode(LineNumber); yyclearin(); Analysis.LogSyntaxError("Syntax error", LineNumber); }
        break;
      case 57: // Expr -> error, Identifier
{  CurrentSemanticValue = new InvalidExpressionNode(LineNumber); yyclearin(); Analysis.LogSyntaxError("Syntax error", LineNumber); }
        break;
      case 58: // Expr -> error, ThisKeyword
{  CurrentSemanticValue = new InvalidExpressionNode(LineNumber); yyclearin(); Analysis.LogSyntaxError("Syntax error", LineNumber); }
        break;
      case 59: // Expr -> error, SquareBracketClose
{  CurrentSemanticValue = new InvalidExpressionNode(LineNumber); yyclearin(); Analysis.LogSyntaxError("Syntax error", LineNumber); }
        break;
      case 60: // Expr -> error, RoundBracketClose
{  CurrentSemanticValue = new InvalidExpressionNode(LineNumber); yyclearin(); Analysis.LogSyntaxError("Syntax error", LineNumber); }
        break;
      case 61: // Expr -> error, LengthKeyword
{  CurrentSemanticValue = new InvalidExpressionNode(LineNumber); yyclearin(); Analysis.LogSyntaxError("Syntax error", LineNumber); }
        break;
      case 62: // ExprList_Opt -> Expr, ExprListRest_Opt
{ ((ExpressionListNode)ValueStack[ValueStack.Depth-1]).expressionList.Reverse(); ((ExpressionListNode)ValueStack[ValueStack.Depth-1]).AddExpression((ExpressionNode)ValueStack[ValueStack.Depth-2]); ((ExpressionListNode)ValueStack[ValueStack.Depth-1]).expressionList.Reverse(); CurrentSemanticValue=ValueStack[ValueStack.Depth-1]; }
        break;
      case 63: // ExprList_Opt -> /* empty */
{ new ExpressionListNode(LineNumber); }
        break;
      case 64: // ExprListRest_Opt -> ExprListRest_Opt, Comma, Expr
{  ((ExpressionListNode)ValueStack[ValueStack.Depth-3]).AddExpression((ExpressionNode)ValueStack[ValueStack.Depth-1]); CurrentSemanticValue=ValueStack[ValueStack.Depth-3]; }
        break;
      case 65: // ExprListRest_Opt -> /* empty */
{ CurrentSemanticValue = new ExpressionListNode(LineNumber); }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


    internal Parser(AbstractScanner<BaseASTNode,LexLocation> scanner) : base(scanner) {  }



}
